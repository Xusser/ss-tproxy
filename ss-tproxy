#!/bin/bash

ss_tproxy_config='/etc/ss-tproxy/ss-tproxy.conf'
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

[ ! -f "$ss_tproxy_config"  ] && { echo "[ERR] No such file or directory: '$ss_tproxy_config'"  1>&2; exit 1; } || source "$ss_tproxy_config"
[ ! -f "$file_chnroute_txt" ] && { echo "[ERR] No such file or directory: '$file_chnroute_txt'" 1>&2; exit 1; }
[ ! -f "$file_chnroute_set" ] && { echo "[ERR] No such file or directory: '$file_chnroute_set'" 1>&2; exit 1; }

function check_command {
    [ "$opts_ss_netstat" = "auto"    ] && { command -v ss &>/dev/null && netstat="ss" || netstat="netstat"; }
    [ "$opts_ss_netstat" = "netstat" ] && netstat="netstat"
    [ "$opts_ss_netstat" = "ss"      ] && netstat="ss"

    command -v ip      &>/dev/null || { echo "[ERR] Command not found: 'ip'"      1>&2; exit 1; }
    command -v dnsmasq &>/dev/null || { echo "[ERR] Command not found: 'dnsmasq'" 1>&2; exit 1; }
    
    command -v curl     &>/dev/null || { echo "[WRN] Command not found: 'curl'"     1>&2;         }
    command -v ipset    &>/dev/null || { echo "[ERR] Command not found: 'ipset'"    1>&2; exit 1; }
}

function update_chnonly {
    data="$(curl -4sSkL https://raw.github.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf)"
    [ "$data" ] || { echo "update failed, please check the error output of curl"; exit 1; }
    echo "$data" | perl -ne 'm@/\K.+(?=/)@; print "$&\n"' >$file_gfwlist_txt
}

function update_chnroute {
    data="$(curl -4sSkL https://raw.github.com/17mon/china_ip_list/master/china_ip_list.txt)"
    [ "$data" ] || { echo "update failed, please check the error output of curl"; exit 1; }
    echo "$data" | grep -Ev '^[ \t]*$|^[ \t]*#' >$file_chnroute_txt
    echo '-N chnroute hash:net' >$file_chnroute_set; sed -r 's/^.+$/-A chnroute &/' $file_chnroute_txt >>$file_chnroute_set
    reserved_address=('0.0.0.0/8' '10.0.0.0/8' '127.0.0.0/8' '169.254.0.0/16' '172.16.0.0/12' '192.168.0.0/16' '224.0.0.0/4' '240.0.0.0/4')
    for addr in "${reserved_address[@]}"; do echo "$addr" >>$file_chnroute_txt; done
}

function flush_dnscache {
    if [ "$opts_ss_netstat" != "netstat" -a "$(command -v ss &>/dev/null && echo 'true')" ]; then
        ss -lnpu | awk -F, '/:60053[ \t].+"dnsmasq"/ {print $(NF-1)}' | awk -F= '{print $2}' | sort | uniq | xargs kill -HUP &>/dev/null
    else
        netstat -lnpu | awk -F/ '/:60053[ \t].+dnsmasq/ {print $(NF-1)}' | awk '{print $NF}' | sort | uniq | xargs kill -HUP &>/dev/null
    fi
}

function start_proxy {
    eval "$proxy_runcmd"
}

function start_resolver {
    echo "start_resolver"
}

function start_iptables {
    sysctl -w net.ipv4.ip_forward=1 &>/dev/null
    for dir in $(ls /proc/sys/net/ipv4/conf); do
        sysctl -w net.ipv4.conf.$dir.send_redirects=0 &>/dev/null
    done

    function check_snat_rule {
        if [ "$ipts_non_snat" != 'true' ]; then
            if ! iptables -t nat -C POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE &>/dev/null; then
                iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
            fi
        fi
    }

    function dec2bin {
        for ((n = $1; n > 0; n >>= 1)); do bit="$((n & 1))$bit"; done
        printf "%08d\n" "$bit"
    }

    function net2bin {
        net=$(awk -F/ '{print $1}' <<<$1)
        len=$(awk -F/ '{print $2}' <<<$1)
        IFS='.' read -ra bytes <<<"$net"
        for byte in "${bytes[@]}"; do result+="$(dec2bin $byte)"; done
        echo "${result:0:len}"
    }

    for cidr in "${ipts_intranet[@]}"; do
        curnet=$(net2bin $cidr)
        for stdnet in 00001010 101011000001 1010100111111110 1100000010101000; do
            [[ "$curnet" == "$stdnet"* ]] && continue 2
        done
        ipts_intranet_nonstd+=($cidr)
    done

    iptables -t mangle -N SSTP_OUT
    iptables -t mangle -N SSTP_PRE
    iptables -t nat    -N SSTP_OUT
    iptables -t nat    -N SSTP_PRE

    iptables -t mangle -A OUTPUT     -j SSTP_OUT
    iptables -t mangle -A PREROUTING -j SSTP_PRE
    iptables -t nat    -A OUTPUT     -j SSTP_OUT
    iptables -t nat    -A PREROUTING -j SSTP_PRE

    ip route add local 0/0 dev lo     table $ipts_rt_tab
    ip rule  add fwmark $ipts_rt_mark table $ipts_rt_tab

if [ "$proxy_tproxy" = 'true' ]; then
case "$mode" in
global|chnroute)
    iptables -t mangle -N SETMARK
    iptables -t mangle -A SETMARK -d 0/8        -j RETURN
    iptables -t mangle -A SETMARK -d 10/8       -j RETURN
    iptables -t mangle -A SETMARK -d 127/8      -j RETURN
    iptables -t mangle -A SETMARK -d 169.254/16 -j RETURN
    iptables -t mangle -A SETMARK -d 172.16/12  -j RETURN
    iptables -t mangle -A SETMARK -d 192.168/16 -j RETURN
    for cidr in "${ipts_intranet_nonstd[@]}"; do
        iptables -t mangle -A SETMARK -d $cidr -j RETURN
    done
    iptables -t mangle -A SETMARK -d 224/4 -j RETURN
    iptables -t mangle -A SETMARK -d 240/4 -j RETURN
    if ! [ "$proxy_dports" ]; then
        for server in "${proxy_server[@]}"; do
            iptables -t mangle -A SETMARK -d $server -j RETURN
        done
    else
        for server in "${proxy_server[@]}"; do
            iptables -t mangle -A SETMARK -d $server -p tcp -m multiport --dports $proxy_dports -j RETURN
            iptables -t mangle -A SETMARK -d $server -p udp -m multiport --dports $proxy_dports -j RETURN
        done
    fi
    if [ "$mode" = chnroute ]; then
        ipset -X chnroute &>/dev/null
        ipset -R <$file_chnroute_set
        iptables -t mangle -A SETMARK -m set --match-set chnroute dst -j RETURN
    fi
    iptables -t mangle -A SETMARK -j MARK --set-mark $ipts_rt_mark

    iptables -t mangle -A SSTP_OUT -p tcp -j SETMARK
    iptables -t mangle -A SSTP_OUT -p udp -j SETMARK
    iptables -t nat    -A SSTP_OUT -p udp -d 127.0.0.1 --dport 53 -j REDIRECT --to-ports 60053

    for intranet in "${ipts_intranet[@]}"; do
        iptables -t mangle -A SSTP_PRE -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j ACCEPT
        iptables -t nat    -A SSTP_PRE -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j REDIRECT --to-ports 60053

        iptables -t mangle -A SSTP_PRE -p tcp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK
        iptables -t mangle -A SSTP_PRE -p udp -s $intranet            -m mark ! --mark $ipts_rt_mark -j SETMARK

        check_snat_rule
    done

    iptables -t mangle -A SSTP_PRE -m mark --mark $ipts_rt_mark -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port $proxy_tcport
    iptables -t mangle -A SSTP_PRE -m mark --mark $ipts_rt_mark -p udp -j TPROXY --on-ip 127.0.0.1 --on-port $proxy_udport
    ;;
esac
else
case "$mode" in
global|chnroute)
    iptables -t nat -N TCPCHAIN
    iptables -t nat -A TCPCHAIN -d 0/8        -j RETURN
    iptables -t nat -A TCPCHAIN -d 10/8       -j RETURN
    iptables -t nat -A TCPCHAIN -d 127/8      -j RETURN
    iptables -t nat -A TCPCHAIN -d 169.254/16 -j RETURN
    iptables -t nat -A TCPCHAIN -d 172.16/12  -j RETURN
    iptables -t nat -A TCPCHAIN -d 192.168/16 -j RETURN
    for cidr in "${ipts_intranet_nonstd[@]}"; do
        iptables -t nat -A TCPCHAIN -d $cidr -j RETURN
    done
    iptables -t nat -A TCPCHAIN -d 224/4 -j RETURN
    iptables -t nat -A TCPCHAIN -d 240/4 -j RETURN
    for server in "${proxy_server[@]}"; do
        iptables -t nat -A TCPCHAIN -d $server $([ "$proxy_dports" ] && echo "-p tcp -m multiport --dports $proxy_dports") -j RETURN
    done
    if [ "$mode" = chnroute ]; then
        ipset -X chnroute &>/dev/null
        ipset -R <$file_chnroute_set
        iptables -t nat -A TCPCHAIN -m set --match-set chnroute dst -j RETURN
    fi
    iptables -t nat -A TCPCHAIN -p tcp -j REDIRECT --to-ports $proxy_tcport

    iptables -t mangle -N UDPCHAIN
    iptables -t mangle -A UDPCHAIN -d 0/8        -j RETURN
    iptables -t mangle -A UDPCHAIN -d 10/8       -j RETURN
    iptables -t mangle -A UDPCHAIN -d 127/8      -j RETURN
    iptables -t mangle -A UDPCHAIN -d 169.254/16 -j RETURN
    iptables -t mangle -A UDPCHAIN -d 172.16/12  -j RETURN
    iptables -t mangle -A UDPCHAIN -d 192.168/16 -j RETURN
    for cidr in "${ipts_intranet_nonstd[@]}"; do
        iptables -t mangle -A UDPCHAIN -d $cidr -j RETURN
    done
    iptables -t mangle -A UDPCHAIN -d 224/4 -j RETURN
    iptables -t mangle -A UDPCHAIN -d 240/4 -j RETURN
    for server in "${proxy_server[@]}"; do
        iptables -t mangle -A UDPCHAIN -d $server $([ "$proxy_dports" ] && echo "-p udp -m multiport --dports $proxy_dports") -j RETURN
    done
    if [ "$mode" = chnroute ]; then
        iptables -t mangle -A UDPCHAIN -m set --match-set chnroute dst -j RETURN
    fi
    iptables -t mangle -A UDPCHAIN -j MARK --set-mark $ipts_rt_mark

    iptables -t nat    -A SSTP_OUT -p tcp -j TCPCHAIN
    iptables -t mangle -A SSTP_OUT -p udp -j UDPCHAIN
    iptables -t nat    -A SSTP_OUT -p udp -d 127.0.0.1 --dport 53 -j REDIRECT --to-ports 60053

    for intranet in "${ipts_intranet[@]}"; do
        iptables -t mangle -A SSTP_PRE -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j ACCEPT
        iptables -t nat    -A SSTP_PRE -p udp -s $intranet --dport 53 -m mark ! --mark $ipts_rt_mark -j REDIRECT --to-ports 60053

        iptables -t nat    -A SSTP_PRE -p tcp -s $intranet                                -j TCPCHAIN
        iptables -t mangle -A SSTP_PRE -p udp -s $intranet -m mark ! --mark $ipts_rt_mark -j UDPCHAIN

        check_snat_rule
    done

    iptables -t mangle -A SSTP_PRE -m mark --mark $ipts_rt_mark -p udp -j TPROXY --on-ip 127.0.0.1 --on-port $proxy_udport
    ;;
esac
fi
}

function start_dnsproxy {
        while umount /etc/resolv.conf; do :; done &>/dev/null
        resolv=$(mktemp)
        chmod 0644 $resolv
        cat <<EOF >$resolv
# Generated by ss-tproxy at $(date '+%F %T')
nameserver 127.0.0.1
EOF
        mount -o bind $resolv /etc/resolv.conf
        rm -f $resolv &>/dev/null
}

function start {
    [ "$(type -t pre_start)" = 'function' ] && pre_start

    while umount /etc/resolv.conf; do :; done &>/dev/null

    start_proxy
    start_resolver
    start_iptables
    #start_dnsproxy

    rm -f $temp_chnroute_txt &>/dev/null

    [ "$(type -t post_start)" = 'function' ] && post_start
}

function stop {
    [ "$(type -t pre_stop)" = 'function' ] && pre_stop

    # Stop DNS
    # while umount /etc/resolv.conf; do :; done &>/dev/null

    iptables -t mangle -D OUTPUT     -j SSTP_OUT &>/dev/null
    iptables -t mangle -D PREROUTING -j SSTP_PRE &>/dev/null
    iptables -t nat    -D OUTPUT     -j SSTP_OUT &>/dev/null
    iptables -t nat    -D PREROUTING -j SSTP_PRE &>/dev/null

    iptables -t mangle -F SSTP_OUT &>/dev/null
    iptables -t mangle -X SSTP_OUT &>/dev/null
    iptables -t mangle -F SSTP_PRE &>/dev/null
    iptables -t mangle -X SSTP_PRE &>/dev/null
    iptables -t nat    -F SSTP_OUT &>/dev/null
    iptables -t nat    -X SSTP_OUT &>/dev/null
    iptables -t nat    -F SSTP_PRE &>/dev/null
    iptables -t nat    -X SSTP_PRE &>/dev/null

    iptables -t mangle -F SETMARK  &>/dev/null
    iptables -t mangle -X SETMARK  &>/dev/null
    iptables -t nat    -F TCPCHAIN &>/dev/null
    iptables -t nat    -X TCPCHAIN &>/dev/null
    iptables -t mangle -F UDPCHAIN &>/dev/null
    iptables -t mangle -X UDPCHAIN &>/dev/null

    if [ "$ipts_non_snat" != 'true' ]; then
        for intranet in "${ipts_intranet[@]}"; do
            if ! iptables -t nat -C POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE &>/dev/null; then
                iptables -t nat -A POSTROUTING -s $intranet ! -d $intranet -j MASQUERADE
            fi
        done
    fi

    ipset -X chnroute &>/dev/null

    ip rule show | grep "fwmark $ipts_rt_mark" | awk -F: '{print $1}' | xargs -n1 ip rule del pref &>/dev/null
    ip route flush table $ipts_rt_tab &>/dev/null

    eval "$proxy_kilcmd" &>/dev/null
    # kill -9 $(pidof 'chinadns') &>/dev/null # Kill DNS Here

    if [ "$opts_ss_netstat" != "netstat" -a "$(command -v ss &>/dev/null && echo 'true')" ]; then
        ss -lnpu | awk -F, '/:60053[ \t].+"dnsmasq"/ {print $(NF-1)}' | awk -F= '{print $2}' | sort | uniq | xargs kill -9 &>/dev/null
    else
        netstat -lnpu | awk -F/ '/:60053[ \t].+dnsmasq/ {print $(NF-1)}' | awk '{print $NF}' | sort | uniq | xargs kill -9 &>/dev/null
    fi

    [ "$(type -t post_stop)" = 'function' ] && post_stop
}

function status {
case "$mode" in
    global)
        echo "mode:     global"
        [ $($netstat -lnpt | grep -E ":$proxy_tcport[ \t]"   | wc -l) -ne 0 ] && echo -e "pxy/tcp:  \e[32m[running]\e[0m" || echo -e "pxy/tcp:  \e[35m[stopped]\e[0m"
        [ $($netstat -lnpu | grep -E ":$proxy_udport[ \t]"   | wc -l) -ne 0 ] && echo -e "pxy/udp:  \e[32m[running]\e[0m" || echo -e "pxy/udp:  \e[35m[stopped]\e[0m"
        #[ $($netstat -lnpu | grep -E ":60053[ \t].+dnsmasq"  | wc -l) -ne 0 ] && echo -e "dnsmasq:  \e[32m[running]\e[0m" || echo -e "dnsmasq:  \e[35m[stopped]\e[0m"
        ;;
    chnroute)
        echo "mode:     chnroute"
        [ $($netstat -lnpt | grep -E ":$proxy_tcport[ \t]"   | wc -l) -ne 0 ] && echo -e "pxy/tcp:  \e[32m[running]\e[0m" || echo -e "pxy/tcp:  \e[35m[stopped]\e[0m"
        #netstat="netstat"
        [ $($netstat -lnpu | grep -E ":$proxy_udport[ \t]"   | wc -l) -ne 0 ] && echo -e "pxy/udp:  \e[32m[running]\e[0m" || echo -e "pxy/udp:  \e[35m[stopped]\e[0m"
        #[ $($netstat -lnpu | grep -E ":60053[ \t].+dnsmasq"  | wc -l) -ne 0 ] && echo -e "dnsmasq:  \e[32m[running]\e[0m" || echo -e "dnsmasq:  \e[35m[stopped]\e[0m"
        #[ $($netstat -lnpu | grep -E ":65353[ \t].+chinadns" | wc -l) -ne 0 ] && echo -e "chinadns: \e[32m[running]\e[0m" || echo -e "chinadns: \e[35m[stopped]\e[0m"
        ;;
esac
}

function show_iptables {
    echo -e "\e[36;1m==> mangle <==\e[0m"
    iptables -t mangle -nvL --line-numbers
    echo
    echo -e "\e[36;1m==> nat <==\e[0m"
    iptables -t nat -nvL --line-numbers
}

function flush_iptables {
    iptables -t raw -F
    iptables -t raw -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t filter -F
    iptables -t filter -X
}

function help {
cat <<EOF
Usage: ss-tproxy <COMMAND>
COMMAND := {
    start               start ss-tproxy
    stop                stop ss-tproxy
    restart             restart ss-tproxy
    status              status of ss-tproxy
    show-iptables       show iptables rules
    flush-iptables      flush iptables rules
    flush-dnscache      flush dns cache
    update-chnroute     update chnroute
    check-command       check commands
    help                show help and exit
}
EOF
}

case $1 in
    start)              check_command; start; status;;
    stop)               check_command; stop; status;;
    status)             check_command; status;;
    r*)                 check_command; stop; status; echo; start; status;;
    show-iptables)      show_iptables;;
    flush-iptables)     flush_iptables;;
    flush-dnscache)     check_command; flush_dnscache;;
    update-chnroute)    check_command; update_chnroute;;
    c*)                 check_command;;
    h*)                 help;;
    *)                  help; exit 1;;
esac
